@use 'vars';
@use 'functions';

// ==========================================================
//  CSS Grid Mixins
// ==========================================================

//  global grid variables ($__* = don't touch)
$__ms-col-gap: null;
$__ms-row-gap: null;
$__ms-col-count: null;
$__ms-row-count: null;

//
//  repeat function
//
@function repeat($repeat, $stuff: 1fr) {
  $list: ();
  @for $i from 1 through $repeat { $list: append($list, $stuff, space); }
  @return $list;
}

//
//  grid-column mixin
//
@mixin grid-column($start: auto, $span: 1) {
  //  grid-column-gap using left margin
  @if $__ms-col-gap and not $__ms-col-count and $start != 1 {
    margin-left: $__ms-col-gap;

    @supports (grid-column-gap: 1px) { margin-left: 0; }
  }
  -ms-grid-column: if($__ms-col-count, $start + $start - 1, $start);
  -ms-grid-column-span: if($__ms-col-count, $span + $span - 1, $span);
  grid-column: #{$start}/#{$start + $span};
  @content;
}

//
//  grid-row mixin
//
@mixin grid-row($start: auto, $span: 1) {
  //  grid-row-gap using top margin
  @if $__ms-row-gap and not $__ms-row-count and $start != 1 {
    margin-top: $__ms-row-gap;

    @supports (grid-row-gap: 1px) { margin-top: 0; }
  }
  -ms-grid-row: if($__ms-row-count, $start + $start - 1, $start);
  -ms-grid-row-span: if($__ms-row-count, $span + $span - 1, $span);
  grid-row: #{$start}/#{$start + $span};
  @content;
}

//
//  grid-cell mixin
//
@mixin grid-cell($col-start: auto, $col-span: 1, $row-start: auto, $row-span: 1) {
  @include grid-column($col-start, $col-span);
  @include grid-row($row-start, $row-span);
  @content;
}

//
//  grid-area mixin
//
@mixin grid-area($area) {
  $area: map-get($grid-areas, $area);
  @include grid-column(nth($area, 1), nth($area, 2));
  @include grid-row(nth($area, 3), nth($area, 4));
  @content;
}

//
//  grid mixin
//
@mixin grid($grid-map) {
  $cols: map-get($grid-map, cols);
  $rows: map-get($grid-map, rows);
  $gap:  map-get($grid-map, gap);
  $col-gap:  map-get($grid-map, col-gap);
  $col-gap: if($col-gap, $col-gap, $gap);
  $row-gap:  map-get($grid-map, row-gap);
  $row-gap: if($row-gap, $row-gap, $gap);

  //  if cols or rows are numbers convert to fraction lists
  @if $cols and length($cols) == 1 and unitless($cols) { $cols: repeat($cols); }
  @if $rows and length($rows) == 1 and unitless($rows) { $rows: repeat($rows); }

  //  ie does not support grid gap - why we insert the gap space as a row or colum
  //  note! the first loop is to ensure cols/rows are not a multidimensional list
  //  (when generated by the repeat function)
  $ms-cols: null;
  $ms-rows: null;
  @if $col-gap and $cols {
    $ms-cols: ();
    @each $col in $cols { $ms-cols: if(type-of($col) == list, join($ms-cols, $col), append($ms-cols, $col)); }
    @for $i from 1 through length($ms-cols) - 1 { $ms-cols: set-nth($ms-cols, $i, nth($ms-cols, $i) $col-gap); }
    //  globalize ms col count (used by grid-column)
    $__ms-col-count: length($ms-cols) !global;
  }
  @if $row-gap and $rows {
    $ms-rows: ();
    @each $row in $rows { $ms-rows: if(type-of($row) == list, join($ms-rows, $row), append($ms-rows, $row)); }
    @for $i from 1 through length($ms-rows) - 1 { $ms-rows: set-nth($ms-rows, $i, nth($ms-rows, $i) $row-gap); }

    //  globalize ms row count (used by grid-row)
    $__ms-row-count: length($ms-rows) !global;
  }
  //
  $__ms-col-gap: $col-gap !global;
  $__ms-row-gap: $row-gap !global;

  display: -ms-grid;
  display: grid;

  -ms-grid-columns: $ms-cols or $cols;
  -ms-grid-rows: $ms-rows or $rows;

  grid-template-columns: $cols;
  grid-template-rows: $rows;

  grid-column-gap: $col-gap;
  grid-row-gap: $row-gap;
  @content;
}

@mixin box($width, $height: $width, $radius: 0) {
  width: $width;
  height: $height;

  @if $radius != 0 {
    border-radius: $radius;
  }
}

@mixin min-box($width, $height: $width, $radius: 0) {
  min-width: $width;
  min-height: $height;

  @if $radius != 0 {
    border-radius: $radius;
  }
}

@mixin placeholder {
  &::placeholder {
    @content;
  }

  &::-webkit-input-placeholder {
    @content;
  }

  &::-moz-placeholder {
    @content;
  }

  &:-moz-placeholder {
    @content;
  }

  &:-ms-input-placeholder {
    @content;
  }
}

@mixin centered-block($max-width) {
  max-width: $max-width;
  margin: 0 auto;
}

@mixin reset-indents() {
  margin: 0;
  padding: 0;
}

@mixin reset-button() {
  padding: 0;

  background: none;
  border: none;
  outline: none;
  cursor: pointer;
}

@mixin reset-list() {
  margin: 0;
  padding: 0;
  list-style: none;
}

@mixin horizontal-list() {
  @include reset-list();

  font-size: 0;

  & > * {
    display: inline-block;

    vertical-align: middle;
    font-size: functions.rem(12);
  }
}

@mixin in-focus() {
  &:not([disabled]):hover,
  &:not([disabled]):focus {
    outline: none;
    @content;
  }
}

@mixin horizontally-centered() {
  position: absolute;
  left: 50%;

  transform: translateX(-50%);
}

@mixin vertically-centered() {
  position: absolute;
  top: 50%;

  transform: translateY(-50%);
}

@mixin absolute-centered($manual-transform: translate(-50%, -50%)) {
  position: absolute;
  top: 50%;
  left: 50%;

  transform: $manual-transform;
}

@mixin stroke-arrow($size: 8px, $thickness: 2px, $color: vars.$main-font-color, $direction: 'down') {
  @include box($size);

  border-bottom: $thickness solid $color;
  border-right: $thickness solid $color;

  @if ($direction == 'up') { transform: rotate(-135deg); }
  @else if ($direction == 'right') { transform: rotate(-45deg); }
  @else if ($direction == 'down') { transform: rotate(45deg); }
  @else if ($direction == 'left') { transform: rotate(135deg); }
}

@mixin filled-arrow($size, $bg-color, $border-color) {
  @include box($size);

  position: absolute;
  top: calc(#{-$size} / 2 - 1px);
  left: 50%;

  background-color: $bg-color;
  @if ($border-color) {
    border-left: 1px solid $border-color;
    border-top: 1px solid $border-color;
  }

  transform: translateX(-50%) rotate(45deg);
}

@mixin cross($size: 20px, $stroke-width: 2px, $color: vars.$main-font-color) {
  @include box(calc(#{$size} + 4px));

  position: relative;

  &::before,
  &::after {
    @include box($size * 1.2, $stroke-width);

    content: '';

    background-color: $color;
  }

  &::before {
    @include absolute-centered(translate(-50%, -50%) rotate(45deg));
  }

  &::after {
    @include absolute-centered(translate(-50%, -50%) rotate(-45deg));
  }
}

@mixin button($width: 180px, $height: null, $color: vars.$main-font-color, $font-size: vars.$font-size-desktop, $font-weight: 700, $uppercase: true, $border: vars.$main-font-color, $border-radius: 3px, $background) {
  @include reset-button();
  @include in-focus() {
    &::before {
      transform: scale(1.05);
    }
  }

  position: relative;

  display: inline-block;
  overflow: visible;
  @if ($width) {
    min-width: $width;
  }
  @if ($height) {
    min-height: $height;
  }
  margin: 0;
  padding: functions.rem(16) functions.rem(14);

  text-align: center;
  vertical-align: middle;
  font-family: inherit;
  font-weight: $font-weight;
  font-size: $font-size;
  line-height: 1.1;
  @if ($uppercase) {
    text-transform: uppercase;
    letter-spacing: 1px;
  }
  white-space: nowrap;
  color: $color;

  border-radius: calc(#{$border-radius} + 1px);

  cursor: pointer;

  &::before {
    @include box(100%);

    content: '';

    position: absolute;
    top: 0;
    left: 0;

    @if ($background) {
      background-color: $background;
    }
    border: 1px solid $border;
    border-radius: $border-radius;

    pointer-events: none;

    transition: all 0.4s ease;
  }
}

@mixin is-supports-grid() {
  @supports ((display: grid) or (display: -ms-grid)) {
    /* Support grid except IE */
    @content;
  }

  @media (-ms-high-contrast: none), (-ms-high-contrast: active) {
    /* IE10-11 */
    @content;
  }
}
